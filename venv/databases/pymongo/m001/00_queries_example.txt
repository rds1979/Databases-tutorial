# mongo --nodb

# mongo "mongodb://cluster0-shard-00-00-jxeqq.mongodb.net:27017,
#                  cluster0-shard-00-00-jxeqq.mongodb.net:27017,
#                  cluster0-shard-00-00-jxeqq.mongodb.net:27017/100YWeatherSmall?replicaSet=Cluster0-shard-0"
#                --authenticationDatabase admin --ssl --username m001-student --password m001-mongodb-basics

# mongo "mongodb+srv://sandbox-ip14p.mongodb.net/university" --username m001-student --password m001-mongodb-basics
--> psql cluster0-shard-00-00-jxeqq.mongodb.net:5432 -d 100YWeatherSmall -U m001-student

# show dbs
--> \l

# show collections
--> \d

# load("loadMovieDetailsDataset.js")
--> \i '/home/dmitriy/postger_load/demo-big-20170815.sql'

# use movies
# show collections
--> \c movies
--> \d

# db.movies.find().pretty()
--> SELECT * FROM movies;

# db.movieDetails.count({"genres" : "Comedy"})
--> SELECT COUNT (*) FROM movie_details WHERE genres = 'Comedy'
# db.movieDetails.find({"genres" : "Comedy"}).pretty().limit(10)
--> SELECT * FROM movie_details WHERE genres = 'Comedy' LIMIT 10

# db.createCollection("moviesTest")
--> CREATE TABLE movie_test ();

# db.movies.insert({"title" : "Rocky", "year" : NumberInt(1976), "imdb" : "tt0075148"})

--> CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
--> \dx uuid-ossp
--> ALTER EXTENSION "uuid-ossp" SET SCHEMA pg_catalog;
--> \dn
--> CREATE SCHEMA video AUTHORIZATION dmitriy;
--> SET SEARCH_PATH TO video;
--> \d+
--> CREATE TABLE movies_scratch (
        movie_uuid UUID NOT NULL DEFAULT uuid_generate_v4(),
        title TEXT NOT NULL,
        year INT,
        imdb CHAR(9),
        PRIMARY KEY(movie_uuid));
--> INSERT INTO movies_scratch (title, year, imdb) VALUES ('Rocky', 1976, 'tt0075148');

# db.movies.insert({"title" : "Creed", "year" : NumberInt(2015), "imdb" : "tt3076658"})
# db.moviesScratch.insertOne({"title" : "Star Trek II: The Wrath of Khan", "year" : 1982, "imdb" : "tt0084726"})

# db.moviesScratch.insertMany([], {"ordered" : false})

# db.movieDetails.find({"rated": "PG-13", "year" : 2009}).pretty()
--> SELECT * FROM movie_details WHERE rated::TEXT ~~ 'PG-13' AND year::INT = 2009

# db.movieDetails.count({"awards.wins" : 2 , "awards.nominations" : 2})
--> SELECT COUNT(*) FROM movie_details WHERE awards_wins = 2 OR awards_nominations = 2;
# db.movieDetails.count({"rated": "PG", "awards.nominations" : 10})

# db.movieDetails.find({"actors.2" : "Kevin Chevalia"}).pretty()
# db.movieDetails.find({"actors": {$all : ['Ed Bernard', 'Kevin Chevalia']}}).pretty()
# db.movieDetails.find({"writers": {$all : ['Ethan Coen', 'Joel Coen']}}).count()
# db.movieDetails.find({"writers": ['Ethan Coen', 'Joel Coen']}).count()
# db.movieDetails.find({"genres": {$all : ['Family']}}).count()
# db.movieDetails.find({"genres.2" : "Western"}).pretty()

# db.movieDetails.find({"genres.2" : "Western"}, {"title" : 1})
--> *******

# db.movieDetails.updateOne({"title" : "The Martian"}, {$set : {"imdb.rating" : 9.5}})
--> UPDATE movie_details SET imdb_rating = 9.5 WHERE title = 'The Martian';
# db.movieDetails.updateOne({"title" : "The Martian"}, {$set : {"awards" : {"wins" : 8, "nomination" : 14, "text" : "tro-lo-lo"}}})
# db.movieDetails.updateMany({{"rated": null, "posted" : null}}, {$set : {"rated" : ""}})


# let filter = {title: "House, M.D., Season Four: New Beginnings"}
# let doc = db.movies.findOne(filter);
# doc.poster
# doc.poster = "https://www.imdb.com/title/tt1329164/mediaviewer/rm2619416576";
# doc.genres;
# doc.genres.push("TV Series");

# db.movieDetails.deleteOne({_id : ObjectId("5ccb5ab2499613aba8c492c4")})
# db.movieDetails.deleteMany({"reviewer_id": "246566786"})
--> DELETE FROM movie_details WHERE id = '5ccb5ab2499613aba8c492c4'

# db.movieDetails.find({"runtime" : {$gt : 90}}, {_id : 0, "tilte" : 1, "runtime" : 1})
--> SELECT title, runtime FROM movie_details WHERE runtime > 90;
# db.movieDetails.find({"runtime" : {$gt : 90, $lt : 120}}, {_id : 0, "tilte" : 1, "runtime" : 1})
--> SELECT title, runtime FROM movie_details WHERE runtime > 90 AND runtime < 120;

# db.movieDetails.find({"runtime" : {$gte : 90, $lte : 120}}, {_id : 0, "title" : 1, "runtime" : 1)
--> SELECT title, runtime FROM movie_details WHERE runtime >= 90 AND  <= 120;
--> SELECT title, runtime FROM movie_details WHERE runtime BETWEEN 90 AND 120;

# db.movieDetails.find({"runtime" : {$gte : 180}, "tomato.meter" : {$gte : 95}}, {_id : 0, "title" : 1, "runtime" : 1})
--> ******

# db.movieDetails.find({"rated" : {$ne : "UNRATED"}}, {_id : 0, "title" : 1, "runtime" : 1})
--> SELECT title, runtime, rated WHERE rated <> "UNRATED";

# db.movieDetails.find({"rated" : {$in : ["G", "PG"]}}, {_id : 0, "title" : 1, "rated" : 1})
--> SELECT title, runtime, rated FROM movie_details WHERE rated IN ("G", "PG");
--> *******

# db.movieDetails({"writers" : {$in : ["Joel Coen", "Ethan Coen"]}}),count()
--> *******

# db.movie.find({"mpaaRating" : {$exists : true}})

# db.movie.find({"viewerRating" : {$type : "int"}}).pretty()

# db.data.find({"atmosphericPressureChange" : {$exists : false}}).count()

# db.movieDetails.find({$or : [{"tomato.meter" : {$gt : 95}},
                               {"metacritic" : {$gt : 88}}]},
                       {_id : 0, "title" : 1, "tomato.meter" : 1, "metacritic" : 1})
--> SELECT title, tomato_meters, metacritic FROM movie_details WHERE tomato_meters > 95 OR metacritic > 88;

# db.movieDetails.find({$and : [{"tomato.meter" : {$gt : 95}},
                                {"metacritic" : {$gt : 88}}]},
                       {_id : 0, "title" : 1, "tomato.meter" : 1, "metacritic" : 1})
--> SELECT title, tomato_meters, metacriric WHERE tomato_meter > 95 AND metacritic > 88;

# db.movieDetails.find({$and : [{"metacritic" : {$ne : null}},
                                {"metacritic" : {$exists : true}}]},
                       {_id : 0, "title" : 1, "tomato.meter" : 1, "metacritic" : 1})

# db.shipwrecks.find({$or : [{"watlev" : {$eq : "always dry"}}, {"depth" : 0}]}).count()
--> SELECT COUNT(*) FROM shipwrecks WHERE watlev::TEXT ~~ 'always dry' OR depth = 0;

# db.movieDetails.find({"genres" : {$all : ["Comedy", "Crime", "Drama"]}}, {_id : 0, "title" : 1, "genres" : 1})
--> SELECT title, genres FROM movie_details WHERE genres IN ("Comedy", "Crime", "Drama");
# db.data.find({"sections" : {$all : ["AG1", "MD1", "OA1"]}})
--> SELECT * FROM data WHERE sections IN ("AG1", "MD1", "OA1");
--> *****

# db.movieDetails.find({"countries" : {$size : 1}}, {_id : 0, "title" : 1, "countries" : 1})

# martian = db.movieDetails.findOne({"title" : "The Martian"})
# delete martian.id
# martian.tomato
# db.moviesDetail.insertOne(martian)
--> *******

# db.movieDetails.find({"awards.text" : {$regex : /^Wom/*/}},{_id : 0, "title" : 1, "awards.text" : 1}).pretty()
--> SELECT title, awards_text FROM movie_details WHERE awards_text ~ '^Won.*';

# db.scories.find({results : {$elemMatch: {$gte : 70, $lt : 80}}})

# quit()
--> \q
